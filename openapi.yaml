openapi: 3.0.0
info:
  title: Bank API
  description: A simple bank API with JWT-based authentication and role-based access control.
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: Users
    description: User registration and login
  - name: Accounts
    description: Manage user accounts (Admin only)
  - name: Balance
    description: Check balance, deposit, and withdraw

paths:
  /register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: password123
                role:
                  type: string
                  enum: [user, admin]
                  example: user
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request

  /login:
    post:
      tags:
        - Users
      summary: Login to get a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Unauthorized

  /accounts:
    post:
      tags:
        - Accounts
      summary: Create a new account (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                UserID:
                  type: integer
                  example: 1
                Balance:
                  type: number
                  format: float
                  example: 1000.0
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Forbidden
        '401':
          description: Unauthorized

    get:
      tags:
        - Accounts
      summary: List all accounts (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '403':
          description: Forbidden
        '401':
          description: Unauthorized

  /balance:
    get:
      tags:
        - Balance
      summary: Get balance of a user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Balance details
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                    example: 1000.0
        '401':
          description: Unauthorized
        '404':
          description: Account not found

    post:
      tags:
        - Balance
      summary: Deposit money to an account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                amount:
                  type: number
                  format: float
                  example: 500.0
      responses:
        '200':
          description: Money deposited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
        '404':
          description: Account not found

    delete:
      tags:
        - Balance
      summary: Withdraw money from an account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                amount:
                  type: number
                  format: float
                  example: 200.0
      responses:
        '200':
          description: Money withdrawn successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Insufficient funds
        '401':
          description: Unauthorized
        '404':
          description: Account not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        ID:
          type: integer
        Username:
          type: string
        Password:
          type: string
        Role:
          type: string
          enum: [user, admin]

    Account:
      type: object
      properties:
        ID:
          type: integer
        UserID:
          type: integer
        Balance:
          type: number
          format: float
        CreatedAt:
          type: string
          format: date-time
